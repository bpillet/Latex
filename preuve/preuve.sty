%% Informations générales
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{preuve}

%CARACTERES
\RequirePackage[utf8]{inputenc}
\RequirePackage[T1]{fontenc}
\RequirePackage{ucs}

%COULEURS PERSOS
\RequirePackage{xcolor}

%\RequirePackage{framed}
\RequirePackage{xifthen}%xparse

\ProcessOptions\relax

\newlength{\lftbarwidth}
\setlength{\lftbarwidth}{2pt}


\newenvironment{lftbar}{%
  \def\FrameCommand{\vrule width \lftbarwidth \hspace{10pt}}%
  \MakeFramed {\advance\hsize-\width \FrameRestore}}%
 {\endMakeFramed}

% A simplified entry to \CustomFBox with two customized parameters:
% the thicknesses of the top and bottom rules.  Perhaps we want to
% use less \fboxsep on the open edges?

\def\OpenFBox#1#2{\fboxsep\FrameSep
   \CustomFBox{}{}{#1}{#2}\FrameRule\FrameRule}

% \CustomFBox is like an amalgamation of \fbox and \@frameb@x,
% so it can be used by an alternate to \fbox or \fcolorbox, but
% it has more parameters for various customizations.
% Parameter #1 is inserted (in vmode) right after the top rule 
% (useful for a title or assignments), and #2 is similar, but
% inserted right above the bottom rule.
% The thicknesses of the top, bottom, left, and right rules are
% given as parameters #3,#4,#5,#6 respectively.  They should be
% \fboxrule or \z@ (or some other thickness).
% The text argument is #7.
% An instance of this can be used for the frame of \fcolorbox by
% locally defining \fbox before \fcolorbox; e.g.,
% \def\fbox{\CustomFBox{}{}\z@\z@\fboxrule\fboxrule}\fcolorbox
%
% Do we need to use different \fboxsep on different sides too?
%
\long\def\CustomFBox#1#2#3#4#5#6#7{%
  \leavevmode\begingroup
  \setbox\@tempboxa\hbox{%
    \color@begingroup
      \kern\fboxsep{#7}\kern\fboxsep
    \color@endgroup}%
  \hbox{%
    % Here we calculate and shift for the depth.  Done in
    % a group because one of the arguments might be \@tempdima
    % (we could use \dimexpr instead without grouping).
    \begingroup
      \@tempdima#4\relax
      \advance\@tempdima\fboxsep
      \advance\@tempdima\dp\@tempboxa
    \expandafter\endgroup\expandafter
    \lower\the\@tempdima\hbox{%
      \vbox{%
        \hrule\@height#3\relax
        #1%
        \hbox{%
          \vrule\@width#5\relax
          \vbox{%
            \vskip\fboxsep % maybe these should be parameters too
            \copy\@tempboxa
            \vskip\fboxsep}%
          \vrule\@width#6\relax}%
        #2%
        \hrule\@height#4\relax}%
    }%
  }%
  \endgroup
}

% \TitleBarFrame[marker]{title}{contents}
% Frame with a label at top, optional continuation marker at bottom right.
% Frame color is TFFrameColor and title color is a contrasting TFTitleColor; 
% both need to be defined before use.  The frame itself use \fboxrule and
% \fboxsep.  If the title is omitted entirely, the title bar is omitted
% (use a blank space to force a blank title bar).
% 
\newcommand\TitleBarFrame[3][]{\begingroup
  \ifx\delimiter#1\delimiter
    \let\TF@conlab\@empty
  \else
    \def\TF@conlab{% continuation label
     \nointerlineskip
     \smash{\rlap{\kern\wd\@tempboxa\kern\fboxrule\kern\fboxsep #1}}}%
  \fi
  \let\TF@savecolor\current@color
  \textcolor{TFFrameColor}{%
  \CustomFBox
    {\TF@Title{#2}}{\TF@conlab}%
    \fboxrule\fboxrule\fboxrule\fboxrule
    {\let\current@color\TF@savecolor\set@color #3}%
  }\endgroup
}

% The title bar for \TitleBarFrame
\newcommand\TF@Title[1]{%
  \ifx\delimiter#1\delimiter\else
  \kern-0.04pt\relax
  \begingroup
  \setbox\@tempboxa\vbox{%
   \kern0.8ex
   \hbox{\kern\fboxsep\textcolor{TFTitleColor}{#1}\vphantom{Tj)}}%
   \kern0.8ex}%
  \hrule\@height\ht\@tempboxa
  \kern-\ht\@tempboxa
  \box\@tempboxa
  \endgroup
  \nointerlineskip 
  \kern-0.04pt\relax
  \fi
}

\chardef\FrameRestore=\catcode`\| % for debug
\catcode`\|=\catcode`\% % (debug: insert space after backslash)

\newlength\OuterFrameSep \OuterFrameSep=\maxdimen \relax

\def\MakeFramed#1{\par
 % apply default \OuterFrameSep = \topsep
 \ifdim\OuterFrameSep=\maxdimen \OuterFrameSep\topsep \fi
 % measure added width and height; call result \width and \height
 \fb@sizeofframe\FrameCommand
 \let\width\fb@frw \let\height\fb@frh
 % insert pre-penalties and skips
 \begingroup
 \skip@\lastskip
 \if@nobreak\else 
    \penalty9999 % updates \page parameters
    \ifdim\pagefilstretch=\z@ \ifdim\pagefillstretch=\z@
       % not infinitely stretchable, so encourage a page break here
       \edef\@tempa{\the\skip@}%
       \ifx\@tempa\zero@glue \penalty-30
       \else \vskip-\skip@ \penalty-30 \vskip\skip@
    \fi\fi\fi
    \penalty\z@
    % Give a stretchy breakpoint that will always be taken in preference
    % to the \penalty 9999 used to update page parameters.  The cube root
    % of 10000/100 indicates a multiplier of 0.21545, but the maximum 
    % calculated badness is really 8192, not 10000, so the multiplier
    % is 0.2301. 
    \advance\skip@ \z@ plus-.5\baselineskip
    \advance\skip@ \z@ plus-.231\height
    \advance\skip@ \z@ plus-.231\skip@
    \advance\skip@ \z@ plus-.231\OuterFrameSep
    \vskip-\skip@ \penalty 1800 \vskip\skip@
 \fi
 \addvspace{\OuterFrameSep}%
 \endgroup
 % clear out pending page break
 \penalty\@M \vskip 2\baselineskip \vskip\height
 \penalty9999 \vskip -2\baselineskip \vskip-\height
 \penalty9999 % updates \pagetotal
|\message{After clearout, \pagetotal=\the\pagetotal, \pagegoal=\the\pagegoal. }%
 \fb@adjheight 
 \setbox\@tempboxa\vbox\bgroup
   #1% Modifications to \hsize (can use \width and \height)
   \textwidth\hsize \columnwidth\hsize
}

\def\endMakeFramed{\par
     \kern\z@
     \hrule\@width\hsize\@height\z@ % possibly bad
     \penalty-100 % (\hrule moves depth into height)
 \egroup
%%%   {\showoutput\showbox\@tempboxa}%
 \begingroup 
   \fb@put@frame\FrameCommand\FirstFrameCommand
 \endgroup
 \@minipagefalse % In case it was set and not cleared
}

% \fb@put@frame takes the contents of \@tempboxa and puts all, or a piece,
% of it on the page with a frame (\FrameCommand, \FirstFrameCommand,
% \MidFrameCommand, or \LastFrameCommand).  It recurses until all of 
% \@tempboxa has been used up. (\@tempboxa must have zero depth.)
% #1 = attempted framing command, if no split
% #2 = framing command if split
% First iteration: Try to fit with \FrameCommand. If it does not fit,
% split for \FirstFrameCommand.
% Later iteration: Try to fit with \LastFrameCommand. If it does not
% fit, split for \MidFrameCommand.
\def\fb@put@frame#1#2{\relax
 \ifdim\pagegoal=\maxdimen \pagegoal\vsize \fi
|   \message{=============== Entering putframe ====================^^J
|     \pagegoal=\the\pagegoal,  \pagetotal=\the\pagetotal. }%
 \ifinner
   \fb@putboxa#1%
   \fb@afterframe
 \else
  \dimen@\pagegoal \advance\dimen@-\pagetotal % natural space left on page
  \ifdim\dimen@<2\baselineskip % Too little room on page
|   \message{Page has only \the\dimen@\space room left; eject. }%
    \eject \fb@adjheight \fb@put@frame#1#2%
  \else % there's appreciable room left on the page
     \fb@sizeofframe#1%
|    \message{\string\pagetotal=\the\pagetotal,
|        \string\pagegoal=\the\pagegoal,
|        \string\pagestretch=\the\pagestretch,
|        \string\pageshrink=\the\pageshrink,
|        \string\fb@frh=\the\fb@frh. \space}
|    \message{^^JBox of size \the\ht\@tempboxa\space}%
     \begingroup % temporarily set \dimen@ to be...
     \advance\dimen@.8\pageshrink  % maximum space available on page
     \advance\dimen@-\fb@frh\relax % max space available for frame's contents
%%% LOOKS SUBTRACTED AND ADDED, SO DOUBLE ACCOUNTING!
     \expandafter\endgroup
     % expand \ifdim, then restore \dimen@ to real room left on page
     \ifdim\dimen@>\ht\@tempboxa % whole box does fit
|       \message{fits in \the\dimen@. }%
        % ToDo: Change this to use vsplit anyway to capture the marks
        % MERGE THIS WITH THE else CLAUSE!!!
        \fb@putboxa#1%
        \fb@afterframe
     \else % box must be split
|       \message{must be split to fit in \the\dimen@. }%
        % update frame measurement to use \FirstFrameCommand or \MidFrameCommand
        \fb@sizeofframe#2%
        \setbox\@tempboxa\vbox{% simulate frame and flexiblity of the page:
           \vskip \fb@frh \@plus\pagestretch \@minus.8\pageshrink
           \kern137sp\kern-137sp\penalty-30
           \unvbox\@tempboxa}%
        \edef\fb@resto@set{\boxmaxdepth\the\boxmaxdepth 
                           \splittopskip\the\splittopskip}%
        \boxmaxdepth\z@ \splittopskip\z@
|       \message{^^JPadded box of size \the\ht\@tempboxa\space split to \the\dimen@}%
        % Split box here
        \setbox\tw@\vsplit\@tempboxa to\dimen@
|       \toks99\expandafter{\splitfirstmark}%
|       \toks98\expandafter{\splitbotmark}%
|       \message{Marks are: \the\toks99, \the\toks98. }%
        \setbox\tw@\vbox{\unvbox\tw@}% natural-sized
|       \message{Natural height of split box is \the\ht\tw@, leaving 
|          \the\ht\@tempboxa\space remainder. }%
        % If the split-to size > (\vsize-\topskip), then set box to full size.
        \begingroup
        \advance\dimen@\topskip
        \expandafter\endgroup
        \ifdim\dimen@>\pagegoal
|         \message{Frame is big -- Use up the full column. }%
          \dimen@ii\pagegoal
          \advance\dimen@ii -\topskip
          \advance\dimen@ii \FrameHeightAdjust\relax
        \else  % suspect this is implemented incorrectly:
          % If the split-to size > feasible room_on_page, rebox it smaller.
          \advance\dimen@.8\pageshrink
          \ifdim\ht\tw@>\dimen@
|           \message{Box too tall; rebox it to \the\dimen@. }%
            \dimen@ii\dimen@
          \else % use natural size
            \dimen@ii\ht\tw@
          \fi
        \fi
        % Re-box contents to desired size \dimen@ii
        \advance\dimen@ii -\fb@frh
        \setbox\tw@\vbox to\dimen@ii \bgroup
        % remove simulated frame and page flexibility:
        \vskip -\fb@frh \@plus-\pagestretch \@minus-.8\pageshrink
        \unvbox\tw@ \unpenalty\unpenalty
        \ifdim\lastkern=-137sp % whole box went to next page
|          \message{box split at beginning! }%
           % need work here???
           \egroup \fb@resto@set \eject % (\vskip for frame size was discarded) 
           \fb@adjheight
           \fb@put@frame#1#2% INSERTED ???
        \else % Got material split off at the head
           \egroup \fb@resto@set
           \ifvoid\@tempboxa % it all fit after all
|             \message{box split at end! }%
              \setbox\@tempboxa\box\tw@
              \fb@putboxa#1%
              \fb@afterframe
           \else % it really did split
|             \message{box split as expected. Its reboxed height is \the\ht\tw@. }%
              \ifdim\wd\tw@>\z@
                \wd\tw@\wd\@tempboxa
                \centerline{#2{\box\tw@}}%  ??? \centerline bad idea
              \else
|               \message{Zero width means likely blank. Don't frame it (guess)}%
                \box\tw@
              \fi
              \hrule \@height\z@ \@width\hsize
              \eject
              \fb@adjheight
              \fb@put@frame\LastFrameCommand\MidFrameCommand
  \fi\fi\fi\fi\fi
}

\def\fb@putboxa#1{%
  \ifvoid\@tempboxa
    \PackageWarning{framed}{Boxa is void -- discard it. }%
  \else
|   \message{Frame and place boxa. }%
|   %{\showoutput\showbox\@tempboxa}%
    \centerline{#1{\box\@tempboxa}}%
  \fi
}

\def\fb@afterframe{%
    \nointerlineskip \null %{\showoutput \showlists}
    \penalty-30 \vskip\OuterFrameSep \relax
}

% measure width and height added by frame (#1 = frame command)
% call results \fb@frw and \fb@frh
% todo: a mechanism to handle wide frame titles 
\newdimen\fb@frw
\newdimen\fb@frh
\def\fb@sizeofframe#1{\begingroup
 \setbox\z@\vbox{\vskip-5in \hbox{\hskip-5in 
   #1{\hbox{\vrule \@height 4.7in \@depth.3in \@width 5in}}}%
   \vskip\z@skip}%
|  \message{Measuring frame addition for \string#1 in \@currenvir\space 
|    gives ht \the\ht\z@\space and wd \the\wd\z@. }%
|  %{\showoutput\showbox\z@}%
 \global\fb@frw\wd\z@ \global\fb@frh\ht\z@
 \endgroup
}

\def\fb@adjheight{%
  \vbox to\FrameHeightAdjust{}% get proper baseline skip from above.
  \penalty\@M \nointerlineskip
  \vskip-\FrameHeightAdjust
  \penalty\@M} % useful for tops of pages

\edef\zero@glue{\the\z@skip}

\catcode`\|=\FrameRestore

% Provide configuration commands:
\providecommand\FrameCommand{%
 \setlength\fboxrule{\FrameRule}\setlength\fboxsep{\FrameSep}%
 \fbox}
\@ifundefined{FrameRule}{\newdimen\FrameRule \FrameRule=\fboxrule}{}
\@ifundefined{FrameSep} {\newdimen\FrameSep  \FrameSep =3\fboxsep}{}
\providecommand\FirstFrameCommand{\FrameCommand}
\providecommand\MidFrameCommand{\FrameCommand}
\providecommand\LastFrameCommand{\FrameCommand}

% Height of frame above first baseline when frame starts a page:
\providecommand\FrameHeightAdjust{6pt}

% \FrameRestore has parts of \@parboxrestore, performing a similar but 
% less complete restoration of the default layout.  See how it is used in
% the "settings" argument of \MakeFrame.  Though not a parameter, \hsize 
% should be set to the desired total line width available inside the
% frame before invoking \FrameRestore.  
\def\FrameRestore{%
   \let\if@nobreak\iffalse
   \let\if@noskipsec\iffalse
   \let\-\@dischyph
   \let\'\@acci\let\`\@accii\let\=\@acciii
   %  \message{FrameRestore:
   %    \@totalleftmargin=\the \@totalleftmargin,
   %    \rightmargin=\the\rightmargin, 
   %    \@listdepth=\the\@listdepth.  }%
   % Test if we are in a list (or list-like paragraph)
   \ifnum \ifdim\@totalleftmargin>\z@ 1\fi  
          \ifdim\rightmargin>\z@ 1\fi
          \ifnum\@listdepth>\z@ 1\fi 0>\z@
     %     \message{In a list: \linewidth=\the\linewidth, \@totalleftmargin=\the\@totalleftmargin,
     %       \parshape=\the\parshape, \columnwidth=\the\columnwidth, \hsize=\the\hsize, 
     %       \labelwidth=\the\labelwidth. }%
     \@setminipage % snug fit around the item.  I would like this to be non-global.
     % Now try to propageate changes of width from \hsize to list parameters.
     % This is deficient, but a more advanced way to indicate modification to text 
     % dimensions is not (yet) provided; in particular, no separate left/right
     % adjustment.
     \advance\linewidth-\columnwidth \advance\linewidth\hsize
     \parshape\@ne \@totalleftmargin \linewidth
   \else % Not in list
     \linewidth=\hsize
     %\message{No list, set \string\linewidth=\the\hsize. }%
   \fi
   \sloppy
}

\def\couleursoit{\color{olive}}
\def\couleurpose{\color{teal}}
\def\couleursuppose{\color{purple}}
\def\couleurmq{\color{blue}}
\def\couleurabsurde{\color{brown}}
\def\couleurcas{\color{violet}}

\newcommand\soit[1]{\par\noindent\begingroup\couleursoit\underline{Soit {#1}}.%
  \vspace*{-2ex}\begin{lftbar}\begingroup\color{black}%
    \medskip}
\newcommand\finsoit[1]{\endgroup\medskip\end{lftbar}\endgroup%
\vspace*{-2ex}%
\par\noindent{\couleursoit Ce raisonnement est valable quel que soit {#1}.}}

\newcommand\onpose[1]{\par\noindent\begingroup\couleurpose\underline{On pose {#1}}.%
  \vspace*{-2ex}\begin{lftbar}\begingroup\color{black}%
    \medskip}
\newcommand\finpose[1]{\endgroup\medskip\end{lftbar}\endgroup%
\vspace*{-2ex}%
\par\noindent{\couleurpose On a vu que {#1} convient.}}

\newcommand\onsuppose[1]{\par\noindent\begingroup\couleursuppose\underline{On suppose {#1}}.%
  \vspace*{-2ex}\begin{lftbar}\begingroup\color{black}%
    \medskip}
\newcommand\finsuppose[2]{\endgroup\medskip\end{lftbar}\endgroup%
\vspace*{-2ex}%
\par\noindent{\couleursuppose On a montré {#1} sous l'hypothèse {#2}.}}

\newcommand\absurde[1]{\par\noindent\begingroup\couleurabsurde\underline{On raisonne par l'absurde en supposant {#1}}.%
  \vspace*{-2ex}\begin{lftbar}\begingroup\color{black}%
    \medskip}
\newcommand\contradiction[1]{\endgroup\medskip\end{lftbar}\endgroup%
\vspace*{-2ex}%
\par\noindent{\couleurabsurde On a aboutit a une contradiction, il était donc absurde de supposer {#1}.}}

\newcounter{disjonctions}%
\newcounter{cas}[disjonctions]%
\def\nomcas{Cas}

\newenvironment{disjonction}[1][]{%
  \count0=\value{cas}%
  \ifthenelse{\isempty{#1}}{}{\renewcommand\nomcas{#1}}%
  \refstepcounter{disjonctions}%
  \par Distinguons les cas~:
  \par\medskip
}{%
  \addtocounter{disjonctions}{-1}%
  \setcounter{cas}{\count0}
}

\newcommand\cas[1]{%
  \refstepcounter{cas}%
  \par\noindent\begingroup\couleurcas\underline{\nomcas~{\arabic{cas} :} {#1}}.%
  \vspace*{-2ex}%
  \begin{lftbar}\begingroup\color{black}%
    \medskip}

\newcommand\fincas{\endgroup\medskip\end{lftbar}\endgroup}

\newcommand\mq[1]{\par\begingroup\couleurmq Montrons que {#1}.\endgroup\par\medskip}
